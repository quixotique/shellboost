#!/bin/bash

# Git wrapper that invokes git with the GIT_AUTHOR_NAME and GIT_COMMITTER_NAME
# environment variables taken from the .gitconfig file in the devconfig
# directory that contains the git repository.  So for example, if $HOME/project
# is a devprofile directory, invoking git on $HOME/project/repo would receive
# the user.email and user.name settings from $HOME/project/.gitconfig.  This
# allows for different Git authors per profile, provided that this wrapper
# script is the first 'git' command in the user's $PATH.

# Bootstrap shellboost.
if [ ! -f "$SHELLBOOST/libsh/include.sh" -a -r "${0%/bin/*}/libsh/include.sh" ]; then
   export SHELLBOOST="${0%/bin/*}"
fi

. "$SHELLBOOST/libsh/include.sh" || exit $?
__shellboost_include libsh/devprofile.bash || exit $?
__shellboost_include libsh/searchpath.sh || exit $?

executable_not_self() {
   test -x "$1" -a ! \( "$0" -ef "$1" \)
}

if ! GIT=$(searchpath_find "$PATH" git executable_not_self); then
   echo "${0##*/}: not found: git" >&2
   exit 1
fi

gitoptions=()
while [[ $# -gt 0 ]]; do
   case "$1" in
   -C|-c) gitoptions+=("$1" "$2"); shift 2;;
   -*) gitoptions+=("$1"); shift 1;;
   *) break;;
   esac
done

toplevel="$("$GIT" "${gitoptions[@]}" rev-parse --show-toplevel 2>/dev/null || echo "$PWD")"

# Use the user.name and user.email settings from the DEVPROFILE's .gitconfig
# file if it exists, but only if the Git repo itself does not configure its own
# user.name/user.email locally.

if devprofile=$(echo_devprofile_that_contains_path "$toplevel") && [[ -r "$HOME/$devprofile/.gitconfig" ]]; then
   if name=$("$GIT" "${gitoptions[@]}" config --file "$HOME/$devprofile/.gitconfig" --get user.name) &&
      ! "$GIT" "${gitoptions[@]}" config --local --get user.name >/dev/null
   then
      export GIT_AUTHOR_NAME="$name"
      export GIT_COMMITTER_NAME="$name"
   fi
   if email=$("$GIT" "${gitoptions[@]}" config --file "$HOME/$devprofile/.gitconfig" --get user.email) &&
      ! "$GIT" "${gitoptions[@]}" config --local --get user.email >/dev/null
   then
      export GIT_AUTHOR_EMAIL="$email"
      export GIT_COMMITTER_EMAIL="$email"
   fi
fi

exec "$GIT" "${gitoptions[@]}" "$@"
