#!/bin/bash

# Git wrapper that must be the first 'git' command found in the user's $PATH.
# Invokes the next 'git' executable in the $PATH, with the following changes:
#
# - Sets the GIT_AUTHOR_NAME and GIT_COMMITTER_NAME environment variables from
#   the .gitconfig file in the devconfig directory that contains the git
#   repository.
#
#   For example, if $HOME/project is a devprofile directory, invoking git on
#   $HOME/project/repo would receive the user.email and user.name settings from
#   $HOME/project/.gitconfig.  This allows for different Git authors per
#   profile
#
# - Inserts the options --git-dir=DIR/.git --work-tree=DIR if a symbolic link
#   .git-repo => DIR is found in the current working directory or any parent
#   directory.  (Does not insert -C DIR because that produces the wrong output
#   from `git rev-parse --git-dir`.)
#

# Bootstrap shellboost.
if [ ! -f "$SHELLBOOST/libsh/include.sh" -a -r "${0%/bin/*}/libsh/include.sh" ]; then
   export SHELLBOOST="${0%/bin/*}"
fi

. "$SHELLBOOST/libsh/include.sh" || exit $?
__shellboost_include libsh/devprofile.bash || exit $?
__shellboost_include libsh/searchpath.sh || exit $?
__shellboost_include libsh/cd.sh || exit $?

GIT="$(searchpath_chain)" || exit $?

opt_help=false
gitoptions=()
while [[ $# -gt 0 ]]; do
   case "$1" in
   --help) opt_help=true; break;;
   -C|-c|--git-dir|--work-tree|--namespace|--super-prefix|--list-cmds) gitoptions+=("$1" "$2"); shift 2;;
   -*) gitoptions+=("$1"); shift 1;;
   *) break;;
   esac
done

git_repo_options=()
if  ! (cd_up_until [ -d .git ]) &&
    git_repo_symlink="$(cd_up_until [ -L .git-repo ] && [ -d .git-repo ] && echo "$PWD/.git-repo")" &&
    ! (cd_up_until [ . -ef "$git_repo_symlink" ])
then
   git_repo_options+=(--git-dir "$git_repo_symlink/.git" --work-tree "$git_repo_symlink")
fi

# Put the -C .git-repo option ahead of caller-supplied options, so that if the
# caller gives -C or --git-dir or --work-tree options, they will override the
# .git-repo directory.
GIT_COMMAND=("$GIT" "${git_repo_options[@]}" "${gitoptions[@]}")

if ! $opt_help; then

   # Find the root directory of the repo being used by the command.
   repo_root="$("${GIT_COMMAND[@]}" rev-parse --show-toplevel 2>/dev/null)"

   # Use the user.name and user.email settings from the DEVPROFILE's .gitconfig
   # file if it exists, but only if the Git repo itself does not configure its own
   # user.name/user.email locally.
   if [ -d "$repo_root" ] &&
      devprofile=$(echo_devprofile_that_contains_path "$repo_root") &&
      [[ -r "$HOME/$devprofile/.gitconfig" ]]
   then
      if name=$("${GIT_COMMAND[@]}" config --file "$HOME/$devprofile/.gitconfig" --get user.name) &&
         ! "${GIT_COMMAND[@]}" config --local --get user.name >/dev/null
      then
         export GIT_AUTHOR_NAME="$name"
         export GIT_COMMITTER_NAME="$name"
      fi
      if email=$("${GIT_COMMAND[@]}" config --file "$HOME/$devprofile/.gitconfig" --get user.email) &&
         ! "${GIT_COMMAND[@]}" config --local --get user.email >/dev/null
      then
         export GIT_AUTHOR_EMAIL="$email"
         export GIT_COMMITTER_EMAIL="$email"
      fi
   fi

   # The 'git submodule' command does not observe the --work-tree option.  Change directory to
   # achieve the same effect.
   if [[ $1 == submodule && ! $repo_root -ef . ]]; then
       cd "$repo_root" >/dev/null || exit $?
   fi

fi

exec "${GIT_COMMAND[@]}" "$@"
